/**
 */
package edu.kit.cockpit.sfmdesigner.servicefeaturemodel.provider;

import edu.kit.cockpit.sfmdesigner.servicefeaturemodel.util.ServicefeaturemodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ServicefeaturemodelItemProviderAdapterFactory extends ServicefeaturemodelAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ServicefeaturemodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Service} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceItemProvider serviceItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Service}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceAdapter() {
		if (serviceItemProvider == null) {
			serviceItemProvider = new ServiceItemProvider(this);
		}

		return serviceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.OptionalServiceFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OptionalServiceFeatureItemProvider optionalServiceFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.OptionalServiceFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOptionalServiceFeatureAdapter() {
		if (optionalServiceFeatureItemProvider == null) {
			optionalServiceFeatureItemProvider = new OptionalServiceFeatureItemProvider(this);
		}

		return optionalServiceFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Requires} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiresItemProvider requiresItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Requires}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequiresAdapter() {
		if (requiresItemProvider == null) {
			requiresItemProvider = new RequiresItemProvider(this);
		}

		return requiresItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Excludes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExcludesItemProvider excludesItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Excludes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExcludesAdapter() {
		if (excludesItemProvider == null) {
			excludesItemProvider = new ExcludesItemProvider(this);
		}

		return excludesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.OR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORItemProvider orItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.OR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORAdapter() {
		if (orItemProvider == null) {
			orItemProvider = new ORItemProvider(this);
		}

		return orItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.XOR} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XORItemProvider xorItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.XOR}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXORAdapter() {
		if (xorItemProvider == null) {
			xorItemProvider = new XORItemProvider(this);
		}

		return xorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.ServiceFeatureDiagram} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceFeatureDiagramItemProvider serviceFeatureDiagramItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.ServiceFeatureDiagram}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceFeatureDiagramAdapter() {
		if (serviceFeatureDiagramItemProvider == null) {
			serviceFeatureDiagramItemProvider = new ServiceFeatureDiagramItemProvider(this);
		}

		return serviceFeatureDiagramItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Configuration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationItemProvider configurationItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Configuration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationAdapter() {
		if (configurationItemProvider == null) {
			configurationItemProvider = new ConfigurationItemProvider(this);
		}

		return configurationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Preference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PreferenceItemProvider preferenceItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Preference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPreferenceAdapter() {
		if (preferenceItemProvider == null) {
			preferenceItemProvider = new PreferenceItemProvider(this);
		}

		return preferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.MandatoryServiceFeature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MandatoryServiceFeatureItemProvider mandatoryServiceFeatureItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.MandatoryServiceFeature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMandatoryServiceFeatureAdapter() {
		if (mandatoryServiceFeatureItemProvider == null) {
			mandatoryServiceFeatureItemProvider = new MandatoryServiceFeatureItemProvider(this);
		}

		return mandatoryServiceFeatureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Configurations} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConfigurationsItemProvider configurationsItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.Configurations}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConfigurationsAdapter() {
		if (configurationsItemProvider == null) {
			configurationsItemProvider = new ConfigurationsItemProvider(this);
		}

		return configurationsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.AttributeTypes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypesItemProvider attributeTypesItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.AttributeTypes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypesAdapter() {
		if (attributeTypesItemProvider == null) {
			attributeTypesItemProvider = new AttributeTypesItemProvider(this);
		}

		return attributeTypesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.AttributeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypeItemProvider attributeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link edu.kit.cockpit.sfmdesigner.servicefeaturemodel.AttributeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypeAdapter() {
		if (attributeTypeItemProvider == null) {
			attributeTypeItemProvider = new AttributeTypeItemProvider(this);
		}

		return attributeTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (serviceItemProvider != null) serviceItemProvider.dispose();
		if (optionalServiceFeatureItemProvider != null) optionalServiceFeatureItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (requiresItemProvider != null) requiresItemProvider.dispose();
		if (excludesItemProvider != null) excludesItemProvider.dispose();
		if (orItemProvider != null) orItemProvider.dispose();
		if (xorItemProvider != null) xorItemProvider.dispose();
		if (serviceFeatureDiagramItemProvider != null) serviceFeatureDiagramItemProvider.dispose();
		if (configurationItemProvider != null) configurationItemProvider.dispose();
		if (preferenceItemProvider != null) preferenceItemProvider.dispose();
		if (mandatoryServiceFeatureItemProvider != null) mandatoryServiceFeatureItemProvider.dispose();
		if (configurationsItemProvider != null) configurationsItemProvider.dispose();
		if (attributeTypesItemProvider != null) attributeTypesItemProvider.dispose();
		if (attributeTypeItemProvider != null) attributeTypeItemProvider.dispose();
	}

}
